<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on ^^</title><link>https://aneesahammed.github.io/tags/github/</link><description>Recent content in GitHub on ^^</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 16 Apr 2021 23:00:00 +0000</lastBuildDate><atom:link href="https://aneesahammed.github.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>ðŸ“¦ grud: GitHub as database</title><link>https://aneesahammed.github.io/posts/grud-github-as-a-database/</link><pubDate>Fri, 16 Apr 2021 23:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/grud-github-as-a-database/</guid><description>GitHub as a database with grud. I recently published a tiny javascript package ðŸ“¦ called grud, with which you can create a simple JSON data store in GitHub and perform read, update &amp;amp; delete operations against the same.
Install grud You can install it with the below command from your terminal.
npm install grud Working with internal tools grud came out of the deepest frustration I often run into while working on internal tools.</description></item><item><title>ðŸš€Hugo: Deploy with GitHub Actions</title><link>https://aneesahammed.github.io/posts/hugo-deploy-with-github-actions/</link><pubDate>Wed, 14 Apr 2021 23:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/hugo-deploy-with-github-actions/</guid><description>This post discusses how Hugo, a blazingly fast static site generator written in Golang, can be deployed with GitHub Actions to GitHub pages.
This blog which you are currently reading, is built using Hugo and is hosted on the Github pages.
Repository structure I&amp;rsquo;ve got a private repository just for the contents &amp;amp; another separate repository to hold the generated files (HTML/CSS).
Initially, I relied on the Hugo CLI to generate &amp;amp; serve the static page contents each time I create/edit posts.</description></item><item><title>DevOps at scale: GitHub</title><link>https://aneesahammed.github.io/posts/devops-practice-github/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/devops-practice-github/</guid><description>I&amp;rsquo;m documenting some DevOps practices and personal recommendations we follow, especially around source control with Git and GitHub.
Working as a Lead DevOps Engineer at one of the biggest financial enterprises, SOC compliance is absolutely critical. Staying SOC compliant while scaling hundreds of projects and engineers? That&amp;rsquo;s nearly impossible without consistent team-wide practices and policies.
TL;DR Have standard naming convention. Follow trunk-based development. Always protect the master &amp;amp; develop branch.</description></item><item><title>GitHub Auto Tagger</title><link>https://aneesahammed.github.io/posts/github-auto-tagger/</link><pubDate>Wed, 10 Apr 2019 23:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/github-auto-tagger/</guid><description>I keep track of all my development work using GitHub project boards.
It not only helps me to see where work is flowing, queued or stalled but also to make our work as visible and transparent as possible.
To simplify, automate &amp;amp; improve GitHub issue management workflow therefore to scratch my own itch, I made a simple GitHub Probot app autotagger. It automatically tags the GitHub Issues based on the matched pattern.</description></item></channel></rss>