<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on ^^</title><link>https://aneesahammed.github.io/tags/github/</link><description>Recent content in GitHub on ^^</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 16 Apr 2021 23:00:00 +0000</lastBuildDate><atom:link href="https://aneesahammed.github.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>ðŸ“¦ grud: GitHub as database</title><link>https://aneesahammed.github.io/posts/grud-github-as-a-database/</link><pubDate>Fri, 16 Apr 2021 23:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/grud-github-as-a-database/</guid><description>Ever tried building an internal tool at a big enterprise and hit the wall when you need a simple database? That&amp;rsquo;s exactly why I built grud â€“ a tiny JavaScript package that turns GitHub into your JSON database.
The Problem: Enterprise Tool Purgatory Working as a consultant in big enterprises, I constantly run into this frustrating cycle. I want to build a quick internal tool â€“ maybe a React app hosted on GitHub Pages.</description></item><item><title>ðŸš€Hugo: Deploy with GitHub Actions</title><link>https://aneesahammed.github.io/posts/hugo-deploy-with-github-actions/</link><pubDate>Wed, 14 Apr 2021 23:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/hugo-deploy-with-github-actions/</guid><description>Setting up automated deployment for my Hugo blog was one of those tasks I kept putting off. You know how it is â€“ the manual process works, so why change it? But once I finally took the plunge with GitHub Actions, I wondered why I waited so long.
This blog you&amp;rsquo;re reading right now is built with Hugo (a blazingly fast static site generator written in Go) and automatically deploys to GitHub Pages every time I commit a new post.</description></item><item><title>DevOps at scale: GitHub</title><link>https://aneesahammed.github.io/posts/devops-practice-github/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/devops-practice-github/</guid><description>I&amp;rsquo;m documenting some DevOps practices and personal recommendations we follow, especially around source control with Git and GitHub.
Working as a Lead DevOps Engineer at one of the biggest financial enterprises, SOC compliance is absolutely critical. Staying SOC compliant while scaling hundreds of projects and engineers? That&amp;rsquo;s nearly impossible without consistent team-wide practices and policies.
TL;DR Have standard naming convention. Follow trunk-based development. Always protect the master &amp;amp; develop branch.</description></item><item><title>GitHub Auto Tagger</title><link>https://aneesahammed.github.io/posts/github-auto-tagger/</link><pubDate>Wed, 10 Apr 2019 23:00:00 +0000</pubDate><guid>https://aneesahammed.github.io/posts/github-auto-tagger/</guid><description>I keep track of all my development work using GitHub project boards.
It not only helps me to see where work is flowing, queued or stalled but also to make our work as visible and transparent as possible.
To simplify, automate &amp;amp; improve GitHub issue management workflow therefore to scratch my own itch, I made a simple GitHub Probot app autotagger. It automatically tags the GitHub Issues based on the matched pattern.</description></item></channel></rss>